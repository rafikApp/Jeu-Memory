
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.Timer;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author rharm
 */
public class JeuMemory extends javax.swing.JFrame {
    private LesPersonnages persos; // peros est de type LesPersonnages sert stocker des personnages selon la taille du jeu (InitDlg)
    private LesJoueurs joueurs; // joueurs est de type LesJoueurs sert stocker les joueurs qui vont jouer (Initdlg)
    private Jeu monJeu;  /* monJeu est de type Jeu, cet attribut et un médiateur entre l'application principale jeuMemory est les autres classes, afin de récuperer plusieurs informations  */
    private int l1,c1,l2,c2; // des entiers qui sert a stocker les cordonnées de la case (bouton)
    /**
     * Creates new form JeuMemory
     */
    public JeuMemory() {
        initComponents(); // Constructeur de la classe ancêtre (JFrame), sert a construire l'interface qui a était faite
        persos=new LesPersonnages();  
        joueurs =new LesJoueurs();
        l1=l2=c1=c2=-1;
        Recommencer.setEnabled(false);
        Edition.setEditable(false);

      /*  Joueur j=new Joueur("Lara", "epiques");
        j.setPhoto(new ImageIcon(getClass().getResource("/img/lara.jpg")));
        joueurs.ajouteJoueur(j);
        j=new Joueur("Jack", "rares");
        j.setPhoto(new ImageIcon(getClass().getResource("/img/jack.png")));
        joueurs.ajouteJoueur(j);
        Personnage p=new Personnage("epiques","Lara",20);
        persos.ajoutePerso(p);*/
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Panneau = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        npTrouvés = new javax.swing.JLabel();
        npRestants = new javax.swing.JLabel();
        joueurCourant = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Edition = new javax.swing.JTextArea();
        jPanel5 = new javax.swing.JPanel();
        Demarrer = new javax.swing.JButton();
        Recommencer = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        Parametres = new javax.swing.JMenu();
        AjouJoueur = new javax.swing.JMenuItem();
        Options = new javax.swing.JMenuItem();
        Visualiser = new javax.swing.JMenu();
        Joueur = new javax.swing.JMenuItem();
        Cartes = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout PanneauLayout = new javax.swing.GroupLayout(Panneau);
        Panneau.setLayout(PanneauLayout);
        PanneauLayout.setHorizontalGroup(
            PanneauLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1544, Short.MAX_VALUE)
        );
        PanneauLayout.setVerticalGroup(
            PanneauLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 484, Short.MAX_VALUE)
        );

        getContentPane().add(Panneau, java.awt.BorderLayout.CENTER);

        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel3.setLayout(new java.awt.GridLayout(3, 1));
        jPanel3.add(npTrouvés);
        jPanel3.add(npRestants);

        joueurCourant.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jPanel3.add(joueurCourant);

        jPanel2.add(jPanel3, java.awt.BorderLayout.NORTH);

        jPanel4.setLayout(new java.awt.GridLayout(1, 0));

        Edition.setColumns(20);
        Edition.setRows(5);
        jScrollPane1.setViewportView(Edition);

        jPanel4.add(jScrollPane1);

        jPanel2.add(jPanel4, java.awt.BorderLayout.CENTER);

        jPanel5.setLayout(new java.awt.GridLayout(1, 2));

        Demarrer.setText("Demarrer");
        Demarrer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DemarrerActionPerformed(evt);
            }
        });
        jPanel5.add(Demarrer);

        Recommencer.setText("Recommencer");
        Recommencer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RecommencerActionPerformed(evt);
            }
        });
        jPanel5.add(Recommencer);

        jPanel2.add(jPanel5, java.awt.BorderLayout.SOUTH);

        getContentPane().add(jPanel2, java.awt.BorderLayout.WEST);

        Parametres.setText("Parametres");

        AjouJoueur.setText("AjoutJoueur");
        AjouJoueur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AjouJoueurActionPerformed(evt);
            }
        });
        Parametres.add(AjouJoueur);

        Options.setText("Options");
        Options.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OptionsActionPerformed(evt);
            }
        });
        Parametres.add(Options);

        jMenuBar1.add(Parametres);

        Visualiser.setText("Visualiser");

        Joueur.setText("Joueur");
        Joueur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JoueurActionPerformed(evt);
            }
        });
        Visualiser.add(Joueur);

        Cartes.setText("Cartes");
        Cartes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CartesActionPerformed(evt);
            }
        });
        Visualiser.add(Cartes);

        jMenuBar1.add(Visualiser);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void JoueurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JoueurActionPerformed
        // TODO add your handling code here:
        if(this.joueurs.getNbJoueurs()!=0){
            VisuJoueursDlg dlg = new VisuJoueursDlg(this, rootPaneCheckingEnabled, joueurs);
            dlg.setVisible(true);
        }
    }//GEN-LAST:event_JoueurActionPerformed

    private void AjouJoueurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AjouJoueurActionPerformed
        // TODO add your handling code here:
        SaisieJoueurDlg sdlg =new SaisieJoueurDlg(this, rootPaneCheckingEnabled, persos);
        sdlg.setVisible(true);
        if(sdlg.getOk())
            this.joueurs.ajouteJoueur(sdlg.getjr());
    }//GEN-LAST:event_AjouJoueurActionPerformed

    private void OptionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OptionsActionPerformed
        // TODO add your handling code here:
        InitDlg dlg = new InitDlg(this, rootPaneCheckingEnabled);
        dlg.setVisible(true);
        if(dlg.getOk()){
            this.joueurs = dlg.getJoueurs();
            this.persos = new LesPersonnages(dlg.getNiveau());
            this.monJeu = new Jeu(persos, joueurs, persos.getTaille());
        }   
    }//GEN-LAST:event_OptionsActionPerformed

    private void CartesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CartesActionPerformed
        // TODO add your handling code here:
        /*Joueur j=new Joueur("FanMemory", "commun");
        j.initPaquetTest();*/
        int n = this.monJeu.getJoueurCourant().getNbCartes();
        if(this.joueurs.getNbJoueurs()!=0 && n>0){
            VisuPersonnagesDlg dl = new VisuPersonnagesDlg(this, rootPaneCheckingEnabled, this.monJeu.getJoueurCourant());
            dl.setVisible(true);
        } 
    }//GEN-LAST:event_CartesActionPerformed

    private void DemarrerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DemarrerActionPerformed
        // TODO add your handling code here:
        Edition.setText("");
        int nj = this.joueurs.getNbJoueurs();
        if(nj<2)
            Edition.setText("erreur, le nombre de joueurs est inférieur à 2");
        else{
            Demarrer.setEnabled(false);
            Recommencer.setEnabled(true);
            AjouJoueur.setEnabled(false);
            Options.setEnabled(false);
            Joueur.setEnabled(true);
            Cartes.setEnabled(true);
            int npr = this.monJeu.getLespers().getTaille();
            int npt=0;
            for(int x=0;x<this.monJeu.getLesJ().getNbJoueurs();x++){
                npt+=this.monJeu.getLesJ().getJoueur(x).getPaquet().getTaille();
            }
            npTrouvés.setText("Nb de personnages trouvés : "+npt);
            npRestants.setText("Nb de personnages restants : "+(npr-npt));
            String p = this.monJeu.getJoueurCourant().getPseudo();
            joueurCourant.setText("C'est à "+p+" de jouer!");
            initPanneau();
        }
    }//GEN-LAST:event_DemarrerActionPerformed

    private void RecommencerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RecommencerActionPerformed
        // TODO add your handling code here:
        Recommencer.setEnabled(false);
        Demarrer.setEnabled(true);
        AjouJoueur.setEnabled(true);
        Options.setEnabled(true);
        Joueur.setEnabled(true);
        Cartes.setEnabled(true);
        Panneau.removeAll();
        Panneau.repaint();
        npRestants.setText("");
        npTrouvés.setText("");
        joueurCourant.setText("");
        Edition.setText("");
        persos=new LesPersonnages();
        joueurs =new LesJoueurs();
    }//GEN-LAST:event_RecommencerActionPerformed
    
    public void initPanneau(){
        int n = 2*(this.persos.getTaille());
        this.monJeu.setMonP(new PlateauJeu(n/2));
        int nl = this.monJeu.getMonP().getNblig();
        int nc = this.monJeu.getMonP().getNbcol();
        Panneau.setLayout(new java.awt.GridLayout(nl, nc));
        int k=0;
        for(int i=0;i<nl;i++){
            for(int j=0;j<nc;j++){
            JButton bt = new JButton();
            //bt.setName(""+this.monJeu.getMonP().getCase(i,j));
            bt.setName(""+k);
            k++;
            bt.setText(""+this.monJeu.getMonP().getCase(i,j)+" "+this.monJeu.getLespers().getPerso(this.monJeu.getMonP().getCase(i,j)).getFamille());
            bt.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    boutonActionPerformed(e);
                }
            });
            Panneau.add(bt);
            }            
        }
    }
    
    public void boutonActionPerformed(java.awt.event.ActionEvent evt){
        PlateauJeu plt = this.monJeu.getMonP();
        JButton bt = (JButton) evt.getSource();
        int nB = Integer.parseInt(bt.getName());
        int nbCol = plt.getNbcol();
        int l = nB/nbCol;
        int c = nB - (l*nbCol);
        /*System.out.println("l:"+l);
        System.out.println("c:"+c);*/
        int valeur = plt.getCase(l, c);
        Personnage p = this.persos.getPerso(valeur);
        p.setImgBouton(bt);
        if(l1==-1 && c1==-1){
            this.l1 = l;
            this.c1 = c;
        }
        else if(l2==-1 && c2==-1){
            this.l2 = l;
            this.c2 = c;
            startTimer();
        }
    }
    
    public void startTimer(){
        // définit un timer qui lance la vérification des deux personnages au bout d'une demi-seconde
        Timer t = new Timer(500, new ActionListener(){
        @Override
        public void actionPerformed(ActionEvent ae){
                verifPersos();
        }
        });
        t.setRepeats(false);
        t.start();
    }
    
    public void verifPersos(){
        PlateauJeu plt = this.monJeu.getMonP();
        Joueur j = this.monJeu.getJoueurCourant();
        int v1 = plt.getCase(l1, c1);
        int v2 = plt.getCase(l2, c2);
        /*System.out.println(v1);
        System.out.println(v2);*/
        if(v1==v2){
            String fam = this.persos.getPerso(v1).getFamille();
            int bonus = this.monJeu.traiteTour(j,v1);
            //int bonus=2;
            //System.out.println(bonus);
            if(bonus>=0){
                Edition.setText(j.getPseudo()+" a gagné tous les personnages de la famille");
                if(bonus==0){
                    plt.termineJeu();
                    String mes = j.getPseudo()+" a gagné";
                    JOptionPane.showMessageDialog(this, mes, "Gagnant", JOptionPane.INFORMATION_MESSAGE);
                    /*Demarrer.setEnabled(false);
                    Recommencer.setEnabled(false);
                    AjouJoueur.setEnabled(false);
                    Options.setEnabled(false);
                    Joueur.setEnabled(false);
                    Cartes.setEnabled(false); */
                    int n = 2*(this.persos.getTaille());
                    for(int i=0;i<n;i++){
                        JButton bt = (JButton) Panneau.getComponent(i);
                        bt.setEnabled(false);
                    }
                }
                else if(bonus==1){
                    TransfertDlg tdiag = new TransfertDlg(this, rootPaneCheckingEnabled, joueurs, this.monJeu.getIndc());
                    tdiag.setVisible(true);
                    if(tdiag.isOk()){
                        Edition.setText(""+tdiag.getTc().getCartesTransferees());
                    }
                }
                else{
                    BatailleDlg bdiag = new BatailleDlg(this, rootPaneCheckingEnabled, joueurs, this.monJeu.getIndc());
                    bdiag.setVisible(true);
                    if(bdiag.isOk()){
                        int res = bdiag.getBataille().execute();
                        if(res==0)
                                Edition.append("Egalité \n");
                        else if(res==1)
                                Edition.append(j.getPseudo()+" a gagné \n");
                        else 
                                Edition.append(bdiag.getAdversaire().getPseudo()+" a gagné \n");
                    }                    
                } 
                bonus=-1;
                int inds = this.monJeu.getIndSuivant(this.monJeu.getIndc());
                this.monJeu.setJoueurCourant(inds);                    
            }
            plt.invalide(l1, c1, l2, c2);
            int b1 = l1*plt.getNbcol()+c1;
            int b2 = l2*plt.getNbcol()+c2;
            /*System.out.println(b1);
            System.out.println(b2);*/
            JButton bt1 =(JButton) Panneau.getComponent(b1);
            JButton bt2 =(JButton) Panneau.getComponent(b2);
            bt1.setEnabled(false);
            bt2.setEnabled(false);
            if(plt.jeuVide()){
                int t = joueurs.getGagnants().getNbJoueurs();
                if(t==1)
                        Edition.append("\n \n Le Gagnant est :\n"+joueurs.getGagnants().toString());
                else 
                        Edition.append("\n \n Les Gagnants sont :\n"+joueurs.getGagnants().toString());
            }
            else{
                int inds = this.monJeu.getIndSuivant(this.monJeu.getIndc());
                this.monJeu.setJoueurCourant(inds);
                //System.out.println(inds+"ind");
                String p = this.joueurs.getJoueur(this.monJeu.getIndc()).getPseudo();  
                joueurCourant.setText("C'est a "+p+" de jouer");
            }
            int npr = this.monJeu.getLespers().getTaille();
            int npt=0;
            for(int x=0;x<this.monJeu.getLesJ().getNbJoueurs();x++){
                npt+=this.monJeu.getLesJ().getJoueur(x).getPaquet().getTaille();
            }
            npTrouvés.setText("Nb de personnages trouvés : "+npt);
            npRestants.setText("Nb de personnages restants : "+(npr-npt));            
        }
        else{
            int npr = this.monJeu.getLespers().getTaille();
            int npt=0;
            for(int x=0;x<this.monJeu.getLesJ().getNbJoueurs();x++){
                npt+=this.monJeu.getLesJ().getJoueur(x).getPaquet().getTaille();
            }
            npTrouvés.setText("Nb de personnages trouvés : "+npt);
            npRestants.setText("Nb de personnages restants : "+(npr-npt));   
            int b1 = l1*plt.getNbcol()+c1;
            int b2 = l2*plt.getNbcol()+c2;
            JButton bt1 =(JButton) Panneau.getComponent(b1);
            JButton bt2 =(JButton) Panneau.getComponent(b2);
            /*JButton bt1 =(JButton) Panneau.getComponent(v1);
            JButton bt2 =(JButton) Panneau.getComponent(v2);*/
            /*JButton bt1 =(JButton) Panneau.getComponentAt(l1,c1);
            JButton bt2 =(JButton) Panneau.getComponentAt(l2,c2);*/
            bt1.setIcon(null);
            bt2.setIcon(null);
            int inds = this.monJeu.getIndSuivant(this.monJeu.getIndc());
            this.monJeu.setJoueurCourant(inds);
            String p = this.joueurs.getJoueur(this.monJeu.getIndc()).getPseudo();  
            joueurCourant.setText("C'est a "+p+" de jouer");
        }
        l1=l2=c1=c2=-1;
    }

    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JeuMemory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JeuMemory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JeuMemory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JeuMemory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JeuMemory().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem AjouJoueur;
    private javax.swing.JMenuItem Cartes;
    private javax.swing.JButton Demarrer;
    private javax.swing.JTextArea Edition;
    private javax.swing.JMenuItem Joueur;
    private javax.swing.JMenuItem Options;
    private javax.swing.JPanel Panneau;
    private javax.swing.JMenu Parametres;
    private javax.swing.JButton Recommencer;
    private javax.swing.JMenu Visualiser;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel joueurCourant;
    private javax.swing.JLabel npRestants;
    private javax.swing.JLabel npTrouvés;
    // End of variables declaration//GEN-END:variables
}
