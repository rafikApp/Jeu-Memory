
import java.awt.event.ActionEvent;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JPanel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author ak859784
 */
public class TransfertDlg extends java.awt.Dialog {
    
    private LesJoueurs lj; //collection des joueurs, pour initialiser la liste déroulante avec les pseudos des joueurs
    private int indj; //indice joueur courant
    private Transfert tc; // cette classe sera étudiée ultérieurement – laisser l’attribut en commentaire
    private boolean ok; // indicateur pour savoir le transfert a bien été effectué.
    private int indjs; //indice du joueur sélectionné dans la liste déroulante
    private String fs; //famille du personnage sélectionné en cliquant sur un des personnages du joueur sélectionné
    /**
     * Creates new form TransfertDlg
     */
    
    public TransfertDlg(java.awt.Frame parent, boolean modal, LesJoueurs lj, int indj) {
        super(parent, modal);
        initComponents();
        this.lj = lj;
        this.indj = indj ;
        this.tc=null;
        this.ok=false;
        this.fs=null;
        initCombo(); // méthode pour remplir la liste déroulante
        indjs = 0;
        Message.setText("Le joueur "+lj.getJoueur(indj).getPseudo()+" a obtenu une famille complète");
        Infos.setText("Personnages de "+lj.getJoueur(indj).getPseudo()+" : \n"+lj.getJoueur(indj).getPaquet());
        Infos.setEditable(false);
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */

    public boolean isOk() {
        return ok;
    }

    public Transfert getTc() {
        return tc;
    }
    
    public void initCombo() {
        for(int i=0;i<lj.getNbJoueurs();i++)
        {
            ComboJoueurs.addItem(lj.getJoueur(i).getPseudo());
        }        
    }
    

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PanneauG = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        Message = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        ComboJoueurs = new javax.swing.JComboBox<>();
        jPanel5 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        Fermer = new javax.swing.JButton();
        Transfert = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Infos = new javax.swing.JTextArea();
        PanneauD = new javax.swing.JPanel();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });
        setLayout(new java.awt.GridLayout(1, 3));

        PanneauG.setLayout(new java.awt.GridLayout(1, 1));
        add(PanneauG);

        jPanel2.setLayout(new java.awt.GridLayout(2, 0));

        jPanel4.setLayout(new java.awt.GridLayout(4, 0));
        jPanel4.add(Message);
        jPanel4.add(jLabel1);
        jPanel4.add(jLabel2);

        ComboJoueurs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboJoueursActionPerformed(evt);
            }
        });
        jPanel4.add(ComboJoueurs);

        jPanel2.add(jPanel4);

        jPanel5.setLayout(new java.awt.BorderLayout());

        jPanel6.setLayout(new java.awt.GridLayout(1, 0));

        Fermer.setText("Fermer");
        Fermer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FermerActionPerformed(evt);
            }
        });
        jPanel6.add(Fermer);

        Transfert.setText("Transfert");
        Transfert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TransfertActionPerformed(evt);
            }
        });
        jPanel6.add(Transfert);

        jPanel5.add(jPanel6, java.awt.BorderLayout.SOUTH);

        Infos.setColumns(20);
        Infos.setRows(5);
        jScrollPane1.setViewportView(Infos);

        jPanel5.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel2.add(jPanel5);

        add(jPanel2);

        PanneauD.setLayout(new java.awt.GridLayout(1, 1));
        add(PanneauD);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Closes the dialog
     */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeDialog

    private void ComboJoueursActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboJoueursActionPerformed
        // TODO add your handling code here:
        this.indjs = ComboJoueurs.getSelectedIndex();  // Affecter la valeur de l'indice du joueur séléctionné aprés la récupération a l'attribut indjs
        if (indjs != -1){  // Si la valeur d'indjs est différente de -1
            if (this.indjs==this.indj) {    // Si la valeur 'injs est différente de celle du joueur courant
            Infos.setText("Sélectionnez un joueur différent du joueur courant !"); // Affichage d'un message
            PanneauG.removeAll(); // Supression de tous les composants du PanneauG
            PanneauG.repaint(); // Reaffichage du PanneauG
            }
            else {
            Infos.setText("\nJoueur sélectionné: "+lj.getJoueur(indjs).toString()); // Affichage d'un message
            initPanneau();       // Appel a la méthode initPanneau
            affichePanneau();    // Appel a la méthode affichePanneau

            }
        }

    }//GEN-LAST:event_ComboJoueursActionPerformed

    private void FermerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FermerActionPerformed
        // TODO add your handling code here:
        ok=false;
        setVisible(ok);
    }//GEN-LAST:event_FermerActionPerformed
    
    public void creePanneau(JPanel jp, LesPersonnages lc){
        jp.removeAll(); // Supression de tous les composants du panneau entrer en paramètres
        jp.repaint(); // Reaffichage du PanneauG
        int t = lc.getTaille(); // Récuperation de la taille de la collection des personnages entrer en paramètres
        int n = 1+(t-1)/4;   // Calcul pour récuperer le nombre de colonnes
        jp.setLayout(new java.awt.GridLayout(4, n));  // Changement de type d'organisation a un GridLayout
        for(int i=0;i<t;i++){
            JButton bt = new JButton(); // Création d'un bouton 
            jp.add(bt); // Ajout du bouton au panneau
        }
    }
    
    public void dessinePanneau(JPanel jp, LesPersonnages lc){  
        int t = lc.getTaille(); // Récuperation de la taille de la collection des personnages entrer en paramètres
        for(int i=0;i<t;i++){  
            JButton bt = (JButton) jp.getComponent(i);  // Réupération de l'i-ème bouton du panneau entrer en paramètres
            //Personnage p = lc.getPerso(i);
            bt.setIcon(new ImageIcon(lc.getPerso(i).getPhoto()));  // Changer l'icone du bouton par la photo de l'i-ème personnage
            //p.setImgBouton(bt);
        }
        
    }
    
    private void TransfertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TransfertActionPerformed
        // TODO add your handling code here:
        int ind = ComboJoueurs.getSelectedIndex(); // Affecter la valeur de l'indice du joueur séléctionné aprés la récupération a l'attribut indjs
        if(ind!=-1 && this.fs!=null){  // Si la valeur d'indjs est différente de -1 et la famille du joueur sléctionné existe
            Joueur jc = this.lj.getJoueur(indj); // Récuperation du joueur Courant
            Joueur cb = this.lj.getJoueur(ind);  // Récuperation du joueur séléctionné
            this.tc = new Transfert(jc, cb, fs);  // Création d'un objet de type Transfert en appelant le constructeur de la classe Transfert qui prend en paramètres j courant, j séléctionné et sa famille.
            int res = tc.execute();  // Appel a la methode execute de la classe Transfert qui rend un entier
            if(res>0){ // si l'entier est strictement positive
                LesPersonnages pt = tc.getCartesTransferees();  // Récupération des cartes a Transférées
                creePanneau(PanneauD, pt);  // Appel a la méthode creePanneau afin de crée le panneau droit
                dessinePanneau(PanneauD, pt);  // Appel a la méthode dessinePanneau afin de dessiner le panneau droit
                cb.getPaquet().retirePersos(fs); // La suppression de tous les personnages qui ont la famille (fs) du paquet du joueuer séléctionnées (la cible)
                creePanneau(PanneauG, cb.getPaquet());  // Appel a la méthode creePanneau afin de crée le panneau gauche
                dessinePanneau(PanneauG, cb.getPaquet());  // Appel a la méthode dessinePanneau afin de dessiner le panneau gauche
                this.ok = true;  // affecter true a l'attribut ok 
                Transfert.setEnabled(false); // Désactiver le bouton Transfert 
            }
        }
        else // si non
            Infos.setText("il est nécessaire de sélectionner un joueur qui a au moins une carte"); // Affichage d'un message
    }//GEN-LAST:event_TransfertActionPerformed
    public void initPanneau(){
             PanneauG.removeAll(); // Supression de tous les composants du PanneauG
             this.repaint(); // Reaffichage 
             Joueur j=lj.getJoueur(indjs);  // Récuperation du joueur séléctionné
             LesPersonnages lcs =j.getPaquet(); // Récuperation de son paquet
             int t = lcs.getTaille(); // Récuperation de la taille du paquet
             int n = 1+(t-1)/4;  // Calcul pour récuperer le nombre de colonnes
             PanneauG.setLayout(new java.awt.GridLayout(4, n)); // Changement de type d'organisation a un GridLayout
            for(int i=0;i<t;i++){
                JButton jb= new JButton();  // Création d'un bouton 
                jb.setName(lcs.getPerso(i).getFamille()); // Changer le nom du bouton a la famille d'i-ème personnage 
                jb.addActionListener(new java.awt.event.ActionListener() { //lier le bouton avec un ecouteur pour qu'il soit cliquable
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbActionPerformed(evt);  // Gestionnaire de clique
                    }
                    });
                 PanneauG.add(jb); // Ajout du bouton au PanneauG
                 this.pack(); // Ajuster l'affichage 
            }
    }
    public void affichePanneau(){
            Joueur j=lj.getJoueur(indjs); // Récuperation du joueur séléctionné
             LesPersonnages lcs =j.getPaquet();   // Récuperation de son paquet
             for(int i=0;i<lcs.getTaille();i++){  // Boucle qui se repete la taille du paquet fois
                 JButton jb=(JButton)  PanneauG.getComponent(i); // Réupération de l'i-ème bouton du PanneauG
                 jb.setIcon(new ImageIcon(lcs.getPerso(i).getPhoto())); // Changer l'icone du bouton par la photo de l'i-ème personnage
             }
    }
    private void jbActionPerformed(ActionEvent evt){
            LesPersonnages lp = lj.getJoueur(indjs).getPaquet(); // récuperation du paquet du joueur sélectionné dans la liste déroulante
            int t = lp.getTaille(); // récuperation de la taille du paquet
            JButton bt=(JButton) evt.getSource();  // récuperation du bouton cliquable
            fs = bt.getName(); // la proprité Name, contient ici le nom du personnage affiché sur le bouton
            for(int i = 0; i < t; i++) {  // boucle qui se répete (t) fois
                JButton b = (JButton)(PanneauG.getComponent(i));  // récuperation de l'i_ème bouton
                if (b.getName().equals(fs))  // tester si le nom de l'i_ème bouton est celui du bouton cliquable
                        b.setBorder(BorderFactory.createMatteBorder(10, 10, 10, 10, new java.awt.Color(255, 0, 0))); // si oui, donner a l'i_ème bouton un (border) 
                else
                        b.setBorder(null); // si non, rien faire
            }
            LesPersonnages lps = lp.getPersosFamille(fs); // récuperation de toutes les personnages ayant le meme nom de famille
            Infos.setText("Vous pouvez récupérer "+lps.getTaille()+" personnages : \n"+lps); // affichage d'un message 
        }
    /**
     * @param args the command line arguments
     */
  

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> ComboJoueurs;
    private javax.swing.JButton Fermer;
    private javax.swing.JTextArea Infos;
    private javax.swing.JLabel Message;
    private javax.swing.JPanel PanneauD;
    private javax.swing.JPanel PanneauG;
    private javax.swing.JButton Transfert;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
